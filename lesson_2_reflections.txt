Initializing a Repository

What happens when you initialize a repository? Why do you need to do it?
Initializing a repository creates the .git directory along with the files neccesary for a git repository. A list of files is created but they are not tracked at first. 

Staging Area

How is the staging area different from the working directory and the repository? What value do you think it offers?

The repository contains all the files that are being tracked. It is not always desirable to track all the files in the working directory. Using the staging area alows the user to choose which files should be tracked together.

Commit Size

How can you use the staging area to make sure you have one commit per logical change?

You can compare the staging area to the previous commit (git diff --staged) and check all the changes that have been made. If there is more than one logical change in different files it may make sense to commit them seperately.

When to Use Branches

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be useful for any situation where we are creating a different version of the program. They would also be useful for adding features that could break other functionality of the code, especially if collaborating with others.

Visualising witj Diagrams

How do the diagrams help you visualize the branch structure

The diagrams show which branch each commit affects and make dealing with multiple branches much more managable

Merging Two Branches

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Git compares each file to the files in the commit when the branches were made. If there is a change in one branch, the change is reflected in the new merged branch. If the change is in more than one branch it will fail.
